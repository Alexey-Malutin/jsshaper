JSShaper is an extensible framework for JavaScript syntax tree
shaping, created by Olov Lassus <olov.lassus@gmail.com>.

The JSShaper web site is available at <http://jsshaper.org>.

There's a google group at <http://groups.google.com/group/jsshaper>
Follow me on <http://twitter.com/olov> or visit me at <http://lassus.se>.

JSShaper and its plugins are implemented in JavaScript. Syntax tree
shaping means performing complex manipulations to a syntax tree
representation of your textual source code, and then turning it back
into source code again. JSShaper goes very far to keep all your source
code formatting, intendation, whitespace and comments.

JSShaper comes with a number of plugins, some of which are listed below:
  annotation-printer:
    prints /* @annotations */
  asserter:
    provides c-style assertions by shaping
    assert(f(x) === 3) into
    assert(f(x) === 3, "f(x) === 3, function myfn, file myfilename.js, line 14")
  bitwiser:
    static analysis. requires @bitwise annotation for the
    bitwise operators | (or), & (and), to detect misspelling of the
    logical operators ||, &&.
  stringconverter:
    detects the ""+expr pattern and turns it into String(expr)
  restricter:
    adds run-time checking for restrict mode programs by
    converting operators into function calls in a compatible way. it
    comes with a small run-time library. <http://restrictmode.org>
  logger:
    formatted logging with great detail (file, function, line)
  watcher:
    trap (watch) object modifications for debugging purposes

It also comes with a few small and simple examples (src/examples).

Get the source code from <https://github.com/olov/jsshaper>:
git clone git://github.com/olov/jsshaper.git
cd jsshaper
git submodule init
git submodule update

JSShaper is young, not very documented, and may crash with horrible
error messages. Thanks for being an early adopter and reporting bugs or
annoyances. Contributors are welcome!

JSShaper is designed to run with node.js or in the browser. It uses AMD.

Run it like this:
node run-shaper.js filename [shape1 .. shapeN]
  where shape is a plugin (see plugins/) or builtin (--tree or --source)
example: node run-shaper.js myfile.js plugins/annotater.js plugins/bitwiser.js --source
example: node run-shaper.js myfile.js plugins/annotater.js plugins/restricter.js --source

For restricter (the restrict mode checker), you can also run the more
convenient run-restricter:
example: node run-restricter.js myfile.js

JSShaper can also execute on the fly, in your browser. Check out
example-restrict-mode-on-the-fly.html for an example of how to use that to
get restrict mode checking without a precomplilation step.

If you want to restrict mode check your node.js code,
plugins/restricter/restrict-mode.js can be loaded with require once and its
helper functions (such as __add) will be accessible to all other modules.

JSShaper and its plugins are Open Source and licensed under the MIT
license, see LICENSE file for terms and conditions.

JSShaper uses the parser from the Mozilla Narcissus
JavaScript-in-JavaScript interpreter
<https://github.com/mozilla/narcissus>, under the terms of the MPL 1.1
license. For full Narcissus licensing information read the
src/narcissus/LICENSE file.
