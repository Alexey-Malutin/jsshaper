Javascript restrict mode design decisions:
------------------------------------------
Restrict mode reduces the amount of type coercion by providing strict
versions of built-in loose operators, similar to how === is already a
strict version of the loose == operator.

Restrict mode adds functions but no new syntax. There's a translator
that automatically converts loose operators into their restrict mode
equivalent, such as a < b into __lt(a, b).

Restrict mode is enabled similar to ECMAScript 5 strict mode. Include
the statement "use restrict"; at the top of your script or inside a
function. It is encouraged to combine the two:
"use strict"; "use restrict";

Since restrict mode is a subset of Javascript, all valid restrict mode
programs will produce equivalent results whether compiled or not. The
opposite is not true, since restrict mode throws errors in cases where
type coercions would normally occur. One use-case is to use the
translated version when executing the unit-tests and the original
version for rapid iterative development and deployment.

It is possible to force the use of a loose operator even in restrict
mode. Some options for this (TBD):
      a /*loose*/ < b + 1    annotation left of operator
      /*loose*/ a < b + 1    annotation prepended to expression
                             (works on lowest priority operator)
      /*loose*/ a < (b + 1)  annotation with explicit parens

Examples of issues with loose comparisions:
-------------------------------------------
[1] < [2] and [1,2] < [1,3] but [10] < [2] (coerced into "10" < "2")
1 + [[[2]]] === "12"
1 < true
n1 = new Number(3), n2 = Number(3)
   n1 <= n2, n2 >= n1 but n1 != n2

Date is special-case:
---------------------
(new Date()) + 1 === "Tue Dec 28 2010 23:59:53 GMT+0100 (CET)1" but
(new Date()) - 1 === 1293577193075

Falsy and truthy values:
------------------------
new Boolean(false) is truthy (object and not null)

Converting to primitive types:
------------------------------
To string: ""+ 101 or String(101)
To number: +"101" or Number("101")
To boolean: !!101 or Boolean(101)

String formatting:
------------------
Alternatives to string concatenation via + operator
log("player " + name + " scored " + points " points ");

log(String.fmt("player {0} scored {1} points", name, points));
log(String.str("player ", name, " scored ", points, " points "));
